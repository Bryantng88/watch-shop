import type { Prisma } from '@prisma/client';
import * as z from 'zod';
import { AcquisitionOrderByWithRelationInputObjectSchema as AcquisitionOrderByWithRelationInputObjectSchema } from './objects/AcquisitionOrderByWithRelationInput.schema';
import { AcquisitionWhereInputObjectSchema as AcquisitionWhereInputObjectSchema } from './objects/AcquisitionWhereInput.schema';
import { AcquisitionWhereUniqueInputObjectSchema as AcquisitionWhereUniqueInputObjectSchema } from './objects/AcquisitionWhereUniqueInput.schema';
import { AcquisitionCountAggregateInputObjectSchema as AcquisitionCountAggregateInputObjectSchema } from './objects/AcquisitionCountAggregateInput.schema';
import { AcquisitionMinAggregateInputObjectSchema as AcquisitionMinAggregateInputObjectSchema } from './objects/AcquisitionMinAggregateInput.schema';
import { AcquisitionMaxAggregateInputObjectSchema as AcquisitionMaxAggregateInputObjectSchema } from './objects/AcquisitionMaxAggregateInput.schema';
import { AcquisitionAvgAggregateInputObjectSchema as AcquisitionAvgAggregateInputObjectSchema } from './objects/AcquisitionAvgAggregateInput.schema';
import { AcquisitionSumAggregateInputObjectSchema as AcquisitionSumAggregateInputObjectSchema } from './objects/AcquisitionSumAggregateInput.schema';

export const AcquisitionAggregateSchema: z.ZodType<Prisma.AcquisitionAggregateArgs> = z.object({ orderBy: z.union([AcquisitionOrderByWithRelationInputObjectSchema, AcquisitionOrderByWithRelationInputObjectSchema.array()]).optional(), where: AcquisitionWhereInputObjectSchema.optional(), cursor: AcquisitionWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), AcquisitionCountAggregateInputObjectSchema ]).optional(), _min: AcquisitionMinAggregateInputObjectSchema.optional(), _max: AcquisitionMaxAggregateInputObjectSchema.optional(), _avg: AcquisitionAvgAggregateInputObjectSchema.optional(), _sum: AcquisitionSumAggregateInputObjectSchema.optional() }).strict() as unknown as z.ZodType<Prisma.AcquisitionAggregateArgs>;

export const AcquisitionAggregateZodSchema = z.object({ orderBy: z.union([AcquisitionOrderByWithRelationInputObjectSchema, AcquisitionOrderByWithRelationInputObjectSchema.array()]).optional(), where: AcquisitionWhereInputObjectSchema.optional(), cursor: AcquisitionWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), AcquisitionCountAggregateInputObjectSchema ]).optional(), _min: AcquisitionMinAggregateInputObjectSchema.optional(), _max: AcquisitionMaxAggregateInputObjectSchema.optional(), _avg: AcquisitionAvgAggregateInputObjectSchema.optional(), _sum: AcquisitionSumAggregateInputObjectSchema.optional() }).strict();